const {initSocket} = require("../socket/socket");
const app = require('../app');
const http = require('http');
const serverDebug = require('debug')('notifications-service:server')
const {initReceivingJob} = require('../jobs/sqs-job')
const {testDbConnection} = require("../database/db");
const Notification = require("../database/models/notification");
const View = require("../database/models/view");

async function init()
{
  require("dotenv").config();
  const port = normalizePort(process.env.PORT || '80');
  app.set('port', port);

  const connected = testDbConnection()
  if (connected === false)
    return;

  await Notification.sync({alter: true})
  await View.sync({alter: true})

  const server = http.createServer(app);

  server.on('error', onError);
  server.on('listening', onListening);

  server.listen(port);

  initSocket(server)
  await initReceivingJob()

  function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
      return val;
    }

    if (port >= 0) {
      return port;
    }

    return false;
  }

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
      case 'EACCES':
        serverDebug(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        serverDebug(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    serverDebug('Listening on ' + bind);

    if (addr.port)
      serverDebug('Server started at: http://localhost:' + addr.port + '/')

  }
}

init()